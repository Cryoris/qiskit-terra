---
features:
  - |
    Add algorithms for Variational Quantum Time Evolution that implement a new interface for
    Quantum Time Evolution. The feature supports real (:class:`qiskit.algorithms.VarQRTE`.) and
    imaginary (:class:`qiskit.algorithms.VarQITE`.) quantum time evolution according to a
    variational principle passed. Each algorithm accepts a variational principle and the following
    are provided:
    :class:`qiskit.algorithms.evolvers.variational.variational_principles.ImaginaryMcLachlanPrinciple`,
    :class:`qiskit.algorithms.evolvers.variational.variational_principles.RealMcLachlanPrinciple`,
    :class:`qiskit.algorithms.evolvers.variational.variational_principles.RealTimeDependentPrinciple`.
    Both algorithms require solving ODE equations and linear equations which is handled by classes
    implemented in `qiskit.algorithms.evolvers.variational.solvers` module.

    Examples::

    .. code-block::

      from qiskit import BasicAer
      from qiskit.circuit.library import EfficientSU2
      from qiskit.opflow import SummedOp, I, Z, Y, X
      from qiskit.algorithms.evolvers.variational.variational_principles.imaginary_mc_lachlan_principle import (
          ImaginaryMcLachlanPrinciple,
      )
      from qiskit.algorithms import EvolutionProblem
      from qiskit.algorithms import VarQITE

      observable = SummedOp(
          [
              0.2252 * (I ^ I),
              0.5716 * (Z ^ Z),
              0.3435 * (I ^ Z),
              -0.4347 * (Z ^ I),
              0.091 * (Y ^ Y),
              0.091 * (X ^ X),
          ]
      ).reduce()

      d = 1
      ansatz = EfficientSU2(observable.num_qubits, reps=d)
      parameters = ansatz.parameters
      init_param_values = np.zeros(len(ansatz.parameters))
      for i in range(len(ansatz.ordered_parameters)):
          init_param_values[i] = np.pi / 2
      param_dict = dict(zip(parameters, init_param_values))
      var_principle = ImaginaryMcLachlanPrinciple()
      backend = BasicAer.get_backend("statevector_simulator")
      time = 1
      evolution_problem = EvolutionProblem(observable, time, ansatz, param_value_dict=param_dict)
      var_qite = VarQITE(var_principle, backend=backend)
      evolution_result = var_qite.evolve(evolution_problem)

