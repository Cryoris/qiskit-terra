import numpy as np
import time

import os
os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'
os.environ['QISKIT_IN_PARALLEL'] = 'True'

from scipy.integrate import Radau, ode, solve_ivp, RK45, RK23
from qiskit.working_files.varQTE.implicit_euler import BDF, backward_euler_fsolve



from qiskit import Aer, QuantumCircuit

from qiskit.circuit import Parameter, ParameterVector

from qiskit.circuit.library import EfficientSU2, RealAmplitudes

from qiskit.opflow.evolutions.varqtes.varqrte import VarQRTE
from qiskit.opflow.evolutions.varqtes.varqite import VarQITE
from qiskit.opflow.evolutions.varqte import ForwardEuler

from qiskit.opflow import StateFn, SummedOp
from qiskit.opflow import Z, I, Y, X
np.random.seed = 11

# Evolution time
t = 1

num_time_steps = [10]
depths = [1]


# Define the expectation value given the Hamiltonian as observable and the state generated by the
#  Ansatz

ode_solvers = [ForwardEuler,  RK45]
ode_solvers_names = ['ForwardEuler', 'RK45']
# ode_solvers = [ForwardEuler]
# ode_solvers_names = ['ForwardEuler']
# ode_solvers = [ BDF]
# ode_solvers_names = ['RK45', 'BDF']

# ode_solvers = [BDF]
# ode_solvers_names = ['BDF']

# ode_solvers = [ RK45]
# ode_solvers_names = ['RK45']
regs = ['ridge', 'perturb_diag', None]
reg_names = ['ridge', 'perturb_diag', 'lstsq']
# regs = ['perturb_diag', None]
# reg_names = ['perturb_diag', 'None']
# for nts in num_time_steps:
# nts = num_time_steps[1]
for nts in num_time_steps:
    for k, ode_solver in enumerate(ode_solvers):
        for d in depths:
            for j, reg in enumerate(regs):
                print(ode_solvers_names[k])
                print(reg_names[j])
                # Define the Hamiltonian for the simulation
                # observable = (Y ^ Y)
                # observable = SummedOp([(Z ^ X), 0.8 * (Y ^ Y)]).reduce()
                observable = SummedOp([-0.25 * (I ^ X ^ I), -0.25 * (X ^ I ^ I),
                                       -0.25 * (I ^ I ^ X), 0.5 * (Z ^ Z ^ I),
                                         0.5 * (I ^ Z ^ Z)]).reduce()
                # observable = (Y ^ I)
                # observable = SummedOp([(Z ^ X), 3. * (Y ^ Y), (Z ^ X), (I ^ Z), (Z ^ I)]).reduce()
                # Define Ansatz
                # ansatz = RealAmplitudes(observable.num_qubits, reps=d)
                ansatz = EfficientSU2(observable.num_qubits, reps=d)
                # ansatz = EfficientSU2(observable.num_qubits, su2_gates=['rx', 'ry', 'rz'],
                #                       entanglement='sca', reps=d)
                parameters = ansatz.ordered_parameters

                # Define a set of initial parameters
                # parameters = ParameterVector('a', length=12)
                # ansatz = QuantumCircuit(observable.num_qubits)
                # ansatz.ry(parameters[0], [0])
                # ansatz.ry(parameters[1], [1])
                # ansatz.rzz(parameters[2], [0], [1])
                # ansatz.rx(parameters[3], [0])
                # ansatz.rx(parameters[4], [1])
                # ansatz.rzz(parameters[5], [0], [1])
                # ansatz.ry(parameters[6], [0])
                # ansatz.ry(parameters[7], [1])
                # ansatz.rzz(parameters[8], [0], [1])
                # ansatz.rx(parameters[9], [0])
                # ansatz.rx(parameters[10], [1])
                # ansatz.rzz(parameters[11], [0], [1])

                #
                # print(ansatz)
                # init_param_values = np.random.rand(len(parameters)) * 1e-3
                init_param_values = np.zeros(len(parameters))
                # for i in range(ansatz.num_qubits):
                #     init_param_values[i] = np.pi / 2
                # initial_point = [np.pi/3, -np.pi/3, np.pi/2., np.pi/3.]
                # initial_point = np.zeros(len(parameters))
                # for i in range(ansatz.num_qubits):
                #     init_param_values[-(ansatz.num_qubits + i + 1)] = np.pi / 2

                # initial_point = [np.pi/3, -np.pi/3, np.pi/2., np.pi / 5, np.pi/4, -np.pi/7,
                # np.pi/8., np.pi / 9]
                # for i in range(ansatz.num_qubits):
                #     init_param_values[-(i + 1)] = np.pi / 2
                print(init_param_values)

                # Now we stack the observable and the quantum state together.
                # The evolution time needs to be added as a coefficient to the operator
                op = ~StateFn(observable) @ StateFn(ansatz)
                op = t * op

                print('number time steps', nts)
                print('depth ', d)
                print('---------------------------------------------------------------------')
                # varqrte_snapshot_dir = os.path.join('..',
                #                                     'output_ising_transverse',
                #                                     'real',
                #                                     str(nts),
                #                                     reg_names[j],
                #                                     ode_solvers_names[k] + 'error')
                ising_dir = '/Users/ouf/Box/ChristaPhDFolder/Papers/VarQTE_Error/output' \
                            '/transverse_ising'
                varqrte_snapshot_dir = os.path.join(ising_dir,
                                                    'real',
                                                    reg_names[j],
                                                    ode_solvers_names[k] + 'error')
                t0 = time.time()
                varqrte = VarQRTE(parameters=parameters,
                                grad_method='lin_comb',
                                init_parameter_values=init_param_values,
                                num_time_steps=nts,
                                ode_solver=ode_solver,
                                backend=Aer.get_backend('statevector_simulator'),
                                regularization=reg,
                                error_based_ode=True,
                                snapshot_dir=varqrte_snapshot_dir
                                # snapshot_dir=os.path.join('..', 'test')
                                )
                varqrte._operator = 1j * op
                # approx_time_evolved_state_real = varqrte.convert(op)
                varqrte_error_bounds = varqrte.error_bound(varqrte_snapshot_dir)
                np.save(os.path.join(varqrte_snapshot_dir, 'error_bounds.npy'),
                        varqrte_error_bounds)
                                                    # snapshot_dir=str(nts)+'/'+str(d)).convert(op)

                print('run time', (time.time()-t0)/60)
                varqrte.plot_results([varqrte_snapshot_dir], [os.path.join(varqrte_snapshot_dir,
                                                                            'error_bounds.npy')])
