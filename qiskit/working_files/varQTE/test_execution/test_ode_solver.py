import numpy as np

from scipy.integrate import Radau

from qiskit.circuit.library import EfficientSU2, RealAmplitudes

from qiskit.opflow.evolutions.varqtes.varqrte import VarQRTE
from qiskit.opflow.evolutions.varqtes.varqite import VarQITE

from qiskit.opflow import StateFn, SummedOp
from qiskit.opflow import Z, I, Y, X
np.random.seed = 2

# Evolution time
t = 2
# TODO Pauli SummedOp

num_time_steps = [10]
depths = [1]


# Define the expectation value given the Hamiltonian as observable and the state generated by the
#  Ansatz

for nts in num_time_steps:
    for d in depths:
        # Define the Hamiltonian for the simulation
        # observable = (I ^ Y)
        # observable = SummedOp([(Z ^ X), 0.3 *(Y ^ Y),  (Y ^ I)]).reduce()
        # observable = (Y ^ I)
        observable = SummedOp([(Z ^ X), 3. * (Y ^ Y), (Z ^ X), (I ^ Z), (Z ^ I)]).reduce()
        # Define Ansatz
        # ansatz = RealAmplitudes(observable.num_qubits, reps=d)
        ansatz = EfficientSU2(observable.num_qubits, reps=d)

        # Define a set of initial parameters
        parameters = ansatz.ordered_parameters
        init_param_values = np.zeros(len(ansatz.ordered_parameters))
        for i in range(ansatz.num_qubits):
            init_param_values[-(ansatz.num_qubits + i + 1)] = np.pi / 2
        # initial_point = [np.pi/3, -np.pi/3, np.pi/2., np.pi/3.]
        # initial_point = np.zeros(len(parameters))
        # for i in range(ansatz.num_qubits):
        #     initial_point[-(ansatz.num_qubits + i + 1)] = np.pi / 2

        # initial_point = [np.pi/3, -np.pi/3, np.pi/2., np.pi / 5, np.pi/4, -np.pi/7, np.pi/8.,
        #                  np.pi / 9]
        # for i in range(ansatz.num_qubits):
        #     initial_point[-(i + 1)] = np.pi / 2
        # print(initial_point)

        # Now we stack the observable and the quantum state together.
        # The evolution time needs to be added as a coefficient to the operator
        op = ~StateFn(observable) @ StateFn(ansatz)
        op = t * op

        print('number time steps', nts)
        print('depth ', d)
        print('---------------------------------------------------------------------')
        approx_time_evolved_state = VarQITE(parameters=parameters, get_error=True,
                                            grad_method='lin_comb',
                                            init_parameter_values=init_param_values,
                                            num_time_steps=nts,
                                            regularization='ridge', ode_solver=Radau
                                            ).convert(op)
                                            # snapshot_dir=str(nts)+'/'+str(d)).convert(op)
