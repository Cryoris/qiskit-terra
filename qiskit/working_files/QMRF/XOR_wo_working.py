import numpy as np
import scipy as sp
import os
import time
import os
os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'
os.environ['QISKIT_IN_PARALLEL'] = 'True'




from scipy.integrate import Radau, ode, solve_ivp, RK45, RK23
from qiskit.working_files.varQTE.implicit_euler import BDF, backward_euler_fsolve

from qiskit.quantum_info import partial_trace


from qiskit import Aer, QuantumCircuit
from qiskit.circuit.library import EfficientSU2, RealAmplitudes
from qiskit.circuit import ParameterVector

from qiskit.opflow.evolutions.varqtes.varqrte import VarQRTE
from qiskit.opflow.evolutions.varqtes.varqite import VarQITE
from qiskit.opflow.evolutions.varqte import ForwardEuler

from qiskit.opflow import StateFn, SummedOp, MatrixOp, TensoredOp
from qiskit.opflow import Z, I, Y, X
np.random.seed = 11

# Evolution time
t = 1

num_time_steps = 10
depths = [1]


# Define the expectation value given the Hamiltonian as observable and the state generated by the
#  Ansatz

ode_solvers = [RK45]
ode_solvers_names = ['RK45']

# ode_solvers = [BDF]
# ode_solvers_names = ['BDF']
#
# ode_solvers = [ForwardEuler]
# ode_solvers_names = ['ForwardEuler']
# regs = ['ridge', 'perturb_diag', None]
# reg_names = ['ridge', 'perturb_diag', 'None']
regs = ['perturb_diag']
reg_names = ['perturb_diag']
observable = MatrixOp([[-3, 0, 0, 0, 0, 0, 0, 0],
                       [0, 3, 0, 0, 0, 0, 0, 0],
                       [0, 0, 3, 0, 0, 0, 0, 0],
                        [0, 0, 0, -3, 0, 0, 0, 0],
                        [0, 0, 0, 0, 3, 0, 0, 0],
                       [0, 0, 0, 0, 0, -3, 0, 0],
                       [0, 0, 0, 0, 0, 0, 3, 0],
                        [0, 0, 0, 0, 0, 0, 0, -3]]).to_pauli_op()
observable = observable.reduce()
target = sp.linalg.expm(-observable.to_matrix(massive=True))/np.trace(sp.linalg.expm(
    -observable.to_matrix(massive=True)))
print('Target ', np.diag(target))
# params1 = ParameterVector('p1', 3)
# ansatz1 = QuantumCircuit(3)
# ansatz1.h(0)
# ansatz1.h(1)
# ansatz1.h(2)
# ansatz1.cry(params1[0], 0, 1)
# ansatz1.cry(params1[1], 1, 2)
# ansatz1.cry(params1[2], 2, 0)
#
#
# params2 = ParameterVector('p2', 6)
# ansatz2 = QuantumCircuit(3)
# ansatz2.h(0)
# ansatz2.h(1)
# ansatz2.h(2)
# ansatz2.cry(params2[0], 0, 1)
# ansatz2.cry(params2[1], 1, 0)
# ansatz2.cry(params2[2], 1, 2)
# ansatz2.cry(params2[3], 2, 1)
# ansatz2.cry(params2[4], 2, 0)
# ansatz2.cry(params2[5], 0, 2)


params3 = ParameterVector('p3', 9)
ansatz3 = QuantumCircuit(3)
ansatz3.ry(params3[0], 0)
ansatz3.ry(params3[1], 1)
ansatz3.ry(params3[2], 2)
ansatz3.cry(params3[3], 0, 1)
ansatz3.cry(params3[4], 1, 2)
ansatz3.cry(params3[5], 2, 0)
ansatz3.ry(params3[6], 0)
ansatz3.ry(params3[7], 1)
ansatz3.ry(params3[8], 2)

params4 = ParameterVector('p4', 12)
ansatz4 = QuantumCircuit(3)
ansatz4.ry(params4[0], 0)
ansatz4.ry(params4[1], 1)
ansatz4.ry(params4[2], 2)
ansatz4.cry(params4[3], 0, 1)
ansatz4.cry(params4[4], 1, 0)
ansatz4.cry(params4[5], 1, 2)
ansatz4.cry(params4[6], 2, 1)
ansatz4.cry(params4[7], 2, 0)
ansatz4.cry(params4[8], 0, 2)
ansatz4.ry(params4[9], 0)
ansatz4.ry(params4[10], 1)
ansatz4.ry(params4[11], 2)


# ansaetze = [ansatz1, ansatz2, ansatz3, ansatz4]
# params = [params1, params2, params3, params4]

ansaetze = [ansatz3, ansatz4]
params = [params3, params4]
# for nts in num_time_steps:
# nts = num_time_steps[1]
for l, ansatz in enumerate(ansaetze):
    for k, ode_solver in enumerate(ode_solvers):
        for d in depths:
            for j, reg in enumerate(regs):
                print(ode_solvers_names[k])
                print(reg_names[j])
                parameters = params[l]

                init_param_values = np.zeros(len(parameters))
                init_param_values[-1] = np.pi/2
                init_param_values[-2] = np.pi / 2
                init_param_values[-3] = np.pi / 2
                # Now we stack the observable and the quantum state together.
                # The evolution time needs to be added as a coefficient to the operator
                op = ~StateFn(observable) @ StateFn(ansatz)
                op = t * op

                print('number time steps', num_time_steps)
                print('---------------------------------------------------------------------')
                t0 = time.time()
                varqite_snapshot_dir = os.path.join('..', 'xor_withoutwork', 'imag',
                                                    'ansatz'+str(l),
                                                    reg_names[j],
                                                    ode_solvers_names[k] + 'nat_grad')

                varqite = VarQITE(parameters=parameters, grad_method='lin_comb',
                                  init_parameter_values=init_param_values,
                                  num_time_steps=num_time_steps,
                                  ode_solver=ode_solver,
                                  backend=Aer.get_backend('statevector_simulator'),
                                  regularization=reg,
                                  error_based_ode=False,
                                  snapshot_dir=varqite_snapshot_dir)
                approx_time_evolved_state_imag = varqite.convert(op)
                out_state = approx_time_evolved_state_imag.eval().primitive.data
                out_state = np.multiply(out_state, np.conj(out_state))

                print('Output', out_state)
                varqite_error_bounds, varqite_reverse_error_bounds = varqite.error_bound(
                    varqite_snapshot_dir, imag_reverse_bound=True,
                    H=observable.to_matrix(massive=True))
                np.save(os.path.join(varqite_snapshot_dir, 'error_bounds.npy'),
                        varqite_error_bounds)
                np.save(os.path.join(varqite_snapshot_dir, 'reverse_error_bounds.npy'),
                        varqite_reverse_error_bounds)
                # dir_fast = '../output/imag/10/ridge/RK45error'
                # varqite.print_results([dir_fast], [os.path.join(dir_fast,
                #                                                'error_bounds.npy')])
                varqite.plot_results([varqite_snapshot_dir], [os.path.join(varqite_snapshot_dir,
                                                              'error_bounds.npy')],
                                      [os.path.join(varqite_snapshot_dir,
                                                    'reverse_error_bounds.npy')]
                                      )

                print('run time', (time.time()-t0)/60)